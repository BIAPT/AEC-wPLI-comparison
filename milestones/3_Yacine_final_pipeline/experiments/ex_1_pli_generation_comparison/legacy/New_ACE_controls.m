clear allclose allclcst0= 'eyesclosed_1';st2 = 'eyesclosed_2';st3 = 'eyesclosed_3';st4 = 'eyesclosed_4';st5 = 'eyesclosed_5';st6 = 'eyesclosed_6';%st7 = 'eyesclosed_7';statenames = {st0, st2, st3, st4, st5, st6};for bb=1:6statename = statenames{bb}; file1 = ['controls_aal/MDFC08_' statename '.mat'];file2 = ['controls_aal/MDFC09_' statename '.mat'];file3 = ['controls_aal/MDFC13_' statename '.mat'];file4 = ['controls_aal/MDFC14_' statename '.mat'];file5 = ['controls_aal/MDFC16_' statename '.mat'];file6 = ['controls_aal/MDFC18_' statename '.mat'];files = {file1,file2,file3,file4,file5,file6}AEC_OUT = cell(1,6);PLI_OUT = cell(1,6);AEC_OUT_1 = cell(1,6);AEC_OUT_WIN = cell(1,6);for i=1:6    load(files{i})Value= Value([82 62 54 56 58 60 30 26 34 32 28 24 36 86 66 76 84 74 72 70 88 3 78 52 50 48 5 22 46 38 40 98 92 90 96 94 68 16 18 20 44 83 63 55 57 59 61 31 27 35 33 29 25 37 87 67 77 85 75 71 73 89 4 79 53 51 49 6 23 47 39 41 99 93 91 97 95 69 17 19 21 45],:);Atlas.Scouts = Atlas.Scouts([82 62 54 56 58 60 30 26 34 32 28 24 36 86 66 76 84 74 72 70 88 3 78 52 50 48 5 22 46 38 40 98 92 90 96 94 68 16 18 20 44 83 63 55 57 59 61 31 27 35 33 29 25 37 87 67 77 85 75 71 73 89 4 79 53 51 49 6 23 47 39 41 99 93 91 97 95 69 17 19 21 45]);% Get ROI labels from atlasLABELS = cell(1,82);for ii = 1:82    LABELS{ii} = Atlas.Scouts(ii).Label;end% Value= Value([25 29 39 11 57 55 5 41 37 33 49 45 59 15 63 51 23 43 7 27 13 67 61 31 17 1 65 9 35 19 53 3 47 21 26 30 40 12 58 56 6 42 38 34 50 46 60 16 64 52 24 44 8 28 14 68 62 32 18 2 66 10 36 20 54 4 48 22],:);% Atlas.Scouts = Atlas.Scouts([25 29 39 11 57 55 5 41 37 33 49 45 59 15 63 51 23 43 7 27 13 67 61 31 17 1 65 9 35 19 53 3 47 21 26 30 40 12 58 56 6 42 38 34 50 46 60 16 64 52 24 44 8 28 14 68 62 32 18 2 66 10 36 20 54 4 48 22]);% % Get ROI labels from atlas% LABELS = cell(1,68);% for ii = 1:68%     LABELS{ii} = Atlas.Scouts(ii).Region;% end% Sampling frequencyf = 1/(Time(2)-Time(1));%%  Choose frequency bandfband = 2;switch fband        case 1        lowpass = 4;        highpass = 1;        fname = 'delta';        d = 10; % Downsampling factor    case 2        lowpass = 8;        highpass = 4;        fname = 'theta';        d = 10;    case 3        lowpass = 13;        highpass = 8;        fname = 'alpha';        d = 5;    case 4        lowpass = 30;        highpass = 13;        fname = 'beta';        d = 5;    case 5        lowpass = 48;        highpass = 30;        fname = 'gamma';        d = 4;end% Can downsample to improve speed of calculation% need at least 2*maxfrequency of interest (i.e. Nyquist)Valued = resample(Value',1,d)';fd  =  f /d; % New sampling frequency%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Frequency filtering, requires eeglab or other frequency filter.Vfilt = eegfilt(Valued,fd,highpass,lowpass,0,0,0,'fir1');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Vfilt = Vfilt';% number of time points and Regions of Interest[m,R] = size(Vfilt);  % cuts edge points from hilbert transformcut = 10;%%  Multivariate leakage correction over whole time courseTimed = linspace(Time(1),Time(end),m);Vlk =symmetric_orthogonalise(Vfilt,true);LC06EC8 = Vlk(20:length(Vlk),:);%%  Plots of data before/after multivariate leakage correction%  %plot(Timed,Vfilt(:,1)); hold on; plot(Timed,Vlk(:,1),'r')% %  node = 50;%  %  figure(1); clf;%  subplot 221; imagesc(cov(Vfilt)); colorbar;%  title('Covariance of non-corrected data')%  %  subplot 222; imagesc(cov(Vlk)); colorbar;%  title('Covariance of multivariate corrected data')%  %  subplot 223; [Pxx,F] = pwelch(Vfilt(:,node),[],[],1024,fd);%  plot(F,Pxx); hold on;%  [Plk,F] = pwelch(Vlk(:,node),[],[],1024,fd);%  plot(F,Plk,'r'); xlim([highpass-2, lowpass+2]);%  xlabel('Hz'); title('Power Spectral Density after frequency filtering');%  legend('non-corrected data','multivariate correction')%  %  subplot 224;%  plot(Timed,Vfilt(:,node));%  hold on%  plot(Timed,Vlk(:,node),'r');%  legend('non-corrected data','multivariate correction')%  xlabel('Time (s)')%  title('Example time course after frequency filtering')%  %  set(gcf,'Name','Comparison of data before/after multivariate leakage correction','color','w') %% Amplitude envelope correlation  ht = hilbert(Vlk); ht = ht(cut+1:end-cut,:); env = abs(ht);  %%%%%%%%%%%%%%%  AEC1 = corr(env); AEC1 = AEC1.*~eye(R); AEC_OUT_1{i}=AEC1;  %% Connectivity estimated with sliding windows  % Bandwidth B = lowpass-highpass; % Length of window T = 10;              % in seconds N = round(T*fd/2)*2; % in data points, needs to be multiple of 2 for 50% overlap  % Number of windows, with 50% overlap K = fix((m-N/2)/(N/2));  aec = zeros(R,R,K); aecp = zeros(R,R,K);  % loop over time windows for k = 1:K          ibeg = (N/2)*(k-1) + 1;     iwind = ibeg:ibeg+N-1;          %% Multivariate leakage correction in window for AEC          Vlk = symmetric_orthogonalise(Vfilt(iwind,:),true);     ht = hilbert(Vlk);     ht = ht(cut+1:end-cut,:);     ht = bsxfun(@minus,ht,mean(ht,1));     % Envelope     env = abs(ht);     aec(:,:,k) = corr(env);               %% Pairwise leakage correction in window for AEC          % Loops around all possible ROI pairs     for jj = 1:R         y = Vfilt(iwind,jj);        ii =  [1:jj-1,jj+1:R];        for iii =  1:R-1            x = Vfilt(iwind,ii(iii));            % Orthogonalise x with respect to y            %xc = leakage_reduction(x,y);                        % If not using linux, leakage_reduction is equivalent to:            beta_leak = pinv(y)*x;            xc = x - y*beta_leak;                                               ht = hilbert([xc,y]);            ht = ht(cut+1:end-cut,:);            ht = bsxfun(@minus,ht,mean(ht,1));            % Envelope            env = abs(ht);            c = corr(env);            aecp(ii(iii),jj,k) = c(1,2);        end    end        %%%%%%%%%%%%%%%        fprintf('Calculated AEC for window %d/%d\n',k,K)end% Average amplitude correlations over all windows with multivariate% correctionAEC = mean(aec,3);AEC = AEC.*~eye(R);  % Set diagonal elements to zero.AEC_OUT_WIN{i}=AEC;% Average amplitude correlations over all windows with pairwise% correction. Correction is asymmetric so we take the average of the% elements above and below the diagonal:% e.g. ( corr(env(1)', env(2)) +  corr(env(1),env(2)') )/2,% where (1) is an ROI and env' indicates a corrected envelope.aecp = (aecp + permute(aecp,[2,1,3]))/2;AECp = mean(aecp,3);AEC_OUT{i}=AECp;%% No correction + PLI calculationht = hilbert(Vfilt);ht = ht(cut+1:end-cut,:);ht = bsxfun(@minus,ht,mean(ht,1));% Phase informationtheta = angle(ht);% BandwidthB = lowpass-highpass;% Window duration for PLI calculationT = 100/(2*B);                % ~100 effective pointsN = round(T*fd/2)*2;K = fix((m-N/2-cut*2)/(N/2)); % number of windows, 50% overlapV = nchoosek(R,2);            % number of ROI pairspli = zeros(V,K);% Loop over time windowsfor k = 1:K        ibeg = (N/2)*(k-1) + 1;    iwind = ibeg:ibeg+N-1;        % loop over all possible ROI pairs    for jj = 2:R        ii = 1:jj-1;        indv = ii + sum(1:jj-2);        % Phase difference        RP = bsxfun(@minus,theta(iwind,jj),theta(iwind, ii));        srp = sin(RP);        pli(indv,k) = abs(sum(sign(srp),1))/N;            end    ind = logical(triu(ones(R),1));    pli_temp = zeros(R);    pli_temp(ind) = pli(:,k);    pli_temp= pli_temp + pli_temp';            %Calculating the surrogate        display('Calculating surrogate:');            for j = 1:20                PLI_surr(j,:,:) = w_PhaseLagIndex_surrogate(Vfilt);            end            %Here we compare the calculated dPLI versus the surrogate            %and test for significance                        for m = 1:length(pli_temp)                for n = 1:length(pli_temp)                    test = PLI_surr(:,m,n);                    p = signrank(test, pli_temp(m,n));                           if p < 0.05                        if pli_temp(m,n) - median(test) < 0 %Special case to make sure no PLI is below 0                            PLIcorr(k,m,n) = 0;                        else                            PLIcorr(k,m,n) = pli_temp(m,n) - median(test);                        end                    else                        PLIcorr(k,m,n) = 0;                    end                          end            endend                     %The z_score is the average of all segments                z_score = zeros(length(pli_temp), length(pli_temp));        for a = 1:K            for p = 1:length(pli_temp)                for j = 1:length(pli_temp)                    z_score(p,j) = z_score(p,j) + PLIcorr(a,p,j);                end            end        end        z_score = z_score/K; PLI_OUT{i} = z_score; endnew_avg_ace_1 = ((AEC_OUT_1{1}+AEC_OUT_1{2}+AEC_OUT_1{3}+AEC_OUT_1{4}+AEC_OUT_1{5}+AEC_OUT_1{6})/6)new_avg_ace_win = ((AEC_OUT_WIN{1}+AEC_OUT_WIN{2}+AEC_OUT_WIN{3}+AEC_OUT_WIN{4}+AEC_OUT_WIN{5}+AEC_OUT_WIN{6})/6)new_avg_ace = ((AEC_OUT{1}+AEC_OUT{2}+AEC_OUT{3}+AEC_OUT{4}+AEC_OUT{5}+AEC_OUT{6})/6)new_avg_pli = ((PLI_OUT{1}+PLI_OUT{2}+PLI_OUT{3}+PLI_OUT{4}+PLI_OUT{5}+PLI_OUT{6})/6)figure(1); subplot 221imagesc(new_avg_ace_1); colorbar;set(gca,'YTick',1:82,'YTickLabel',LABELS);title('AEC, multivariate correction')figure(1); subplot 222imagesc(new_avg_ace_win);colorbarset(gca,'YTick',1:82,'YTickLabel',LABELS);title(sprintf('AEC, multivariate correction %.1fs window average',10))figure(1); subplot 223imagesc(new_avg_ace);colorbar;set(gca,'YTick',1:82,'YTickLabel',LABELS);title(sprintf('AEC, pairwise correction %.1fs window average',10))fig=figure(1); subplot 224imagesc(new_avg_pli);colorbar; caxis([min(new_avg_pli(~eye(R))), max(new_avg_pli(~eye(R)))])set(gca,'YTick',1:82,'YTickLabel',LABELS);title(sprintf('PLI, with %.1fs windows',T))set(gcf,'Name','Connectivity matrices','color','w')fileAEC1 = ['AEC_OUT_1_' statename '_theta_aal.mat'];fileAEC2 = ['AEC_OUT_WIN_' statename '_theta_aal.mat'];fileAEC3 = ['AEC_OUT_' statename '_theta_aal.mat'];filePLI = ['PLI_OUT' statename '_theta_aal.mat'];fileFIG = ['F1_' statename '_theta_aal.fig'];save(fileAEC1, 'AEC_OUT_1');save(fileAEC2, 'AEC_OUT_WIN');save(fileAEC3, 'AEC_OUT');save(filePLI, 'PLI_OUT');savefig(fileFIG);end